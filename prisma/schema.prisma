generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int               @id @default(autoincrement())
  fullName      String
  phone         String            @unique
  role          UserRole          @default(USER)
  phoneVerified DateTime?
  createdAt     DateTime          @default(now())
  cart          Cart?
  cartItems     CartItem[]
  orders        Order[]
  verification  VerificationCode?
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  imageURL  String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
}

model Product {
  id               Int                @id @default(autoincrement())
  name             String
  description      String
  compound         String?
  imageURL         String
  gram             Int
  kilocalories     Int?
  protein          Int?
  fats             Int?
  carbohydrates    Int?
  price            Int
  categoryId       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  cartItem         CartItem[]
  category         Category           @relation(fields: [categoryId], references: [id])
  ProductsInRecipe ProductsInRecipe[]
}

model Recipe {
  id               Int                @id @default(autoincrement())
  name             String
  imageURL         String
  time             Int
  ingredients      String[]
  tags             String[]
  stepsAtAll       Int
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  ProductsInRecipe ProductsInRecipe[]
  recipeProcess    RecipeProcess[]
}

model ProductsInRecipe {
  id        Int     @id @default(autoincrement())
  recipeId  Int
  productId Int
  product   Product @relation(fields: [productId], references: [id])
  recipe    Recipe  @relation(fields: [recipeId], references: [id])

  @@unique([recipeId, productId])
}

model RecipeProcess {
  id          Int      @id @default(autoincrement())
  recipeId    Int
  step        Int
  description String
  imageURL    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  recipe      Recipe   @relation(fields: [recipeId], references: [id])
}

model Cart {
  id          Int        @id @default(autoincrement())
  userId      Int        @unique
  totalAmount Int        @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  user        User       @relation(fields: [userId], references: [id])
  items       CartItem[]
  orders      Order[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  productId Int
  cartId    Int
  userId    Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Order {
  id          Int         @id @default(autoincrement())
  userId      Int
  cartId      Int
  status      OrderStatus @default(PENDING)
  totalAmount Int
  paymentId   String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  cart        Cart        @relation(fields: [cartId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model VerificationCode {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  code      String
  expiresAt DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, code])
}

enum UserRole {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}
